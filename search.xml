<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>李紫妍小狗看这里</title>
      <link href="/posts/60cbaead.html"/>
      <url>/posts/60cbaead.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, 密码错了，检查一下好吗～" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ff5ff7f889818646eda3549e2f5bbe07763659045f3d8d3021bef60e377d2cf1">5721b3043924539f893d613b65e3f46ec5ef5e1d195c5c3df1d8369ea6b068e50a88e9a4abd2a5f2e59b542283b965e84e353a96237e5ac7b641cb9a09fc9d34cd556674ebd850b69a5d6859b070fbbcd24626fdf589f26e75dee37dcd57889ff0becd71eacbdd50eaa906fb77c440022956447d5d598e45a2ade12980c4e8d23c75e0c769fd36371ad21e01feeca39cf1240d215378bec911760b30c3bfc964</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Hey, 这篇文章被加密了，请输入密码！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有时候我们看不见爱，只是因为一直在爱里</title>
      <link href="/posts/eec2a1c9.html"/>
      <url>/posts/eec2a1c9.html</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>晨雾未散时，玻璃瓶里的桂花蜜已凝成琥珀。她习惯性将温水注入瓷杯，金属壶口与杯沿相碰的清响惊醒了看报人。老花镜片映着秋阳，在皱纹里折出细碎的光。</p><p>雨突至的午后，墨绿伞柄上缠绕的医用胶布洇着水痕。她摸到衣袋里发潮的姜糖，想起出门时玄关处重叠的鞋刷声与挂钟滴答。</p><p>烧得混沌的深夜，额间温毛巾像永不融化的雪。朦胧间听见冰袋碰撞声，如同二十年前月台上绿皮火车的汽笛——那时他攥着连夜排队买的站票，军大衣口袋里藏着捂化的桂花糕。</p><p>此刻晨光漫过床头药盒，她忽然看清那些散落在岁月里的碎片：总在充电宝满格的手机，永远提前十分钟的早餐，深夜里留着缝的防盗链。原来爱从未隐身，只是化作氧气般的寻常。</p><p>楼下的桂花又开了，甜香漫过二十年晨昏，在相扣的指缝里酿成永恒的金色。</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阳光不噪，微风正好</title>
      <link href="/posts/65847e45.html"/>
      <url>/posts/65847e45.html</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>一生时间很短<br>短到不过是两颗心之间的距离<br>一生的时间也很长<br>不如我们试着走走看</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!Check <a href="https://hexo.io/docs/">documentation</a> for more info. You can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  /* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(57, 197, 187);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/background/background.js"/>
      <url>/js/background/background.js</url>
      
        <content type="html"><![CDATA[!function(){'use strict';/* 工具模块 */const Utils = {    debounce: (func, wait = 30) => {        let timeout;        return (...args) => {            clearTimeout(timeout);            timeout = setTimeout(() => func.apply(this, args), wait);        }    },    uuid: () => {        let d = Date.now();        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {            const r = (d + Math.random() * 16) % 16 | 0;            d = Math.floor(d / 16);            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);        });    }};/* 尺寸传感器 */class SizeSensor {    static sensors = new Map();        static observe(element, callback) {        const sensor = new ResizeObserver(Utils.debounce(() => {            callback(element);        }));        sensor.observe(element);        this.sensors.set(element, sensor);    }    static unobserve(element) {        const sensor = this.sensors.get(element);        if(sensor) {            sensor.disconnect();            this.sensors.delete(element);        }    }}/* 粒子系统核心 */class ParticleBackground {    constructor(container, options = {}) {        this.container = container;        this.options = {            colorType: 'rainbow',            colors: ['#FF6B6B', '#4ECDC4', '#45B7D1'],            lineType: 'gradient',            particleCount: 80,            maxDistance: 6000,            particleSize: 2,            lineWidth: 1,            opacity: 0.6,            zIndex: -1,            velocity: 0.8,          // 新增：基础速度系数            speedVariation: 0.3,    // 新增：速度随机变化范围            ...options        };                this.initCanvas();        this.initParticles();        this.bindEvents();        this.startAnimation();    }    initCanvas() {        this.canvas = document.createElement('canvas');        this.ctx = this.canvas.getContext('2d');                Object.assign(this.canvas.style, {            position: 'absolute',            top: '0',            left: '0',            zIndex: this.options.zIndex,            opacity: this.options.opacity        });                this.container.appendChild(this.canvas);        this.resizeCanvas();    }    resizeCanvas() {        this.canvas.width = this.container.clientWidth;        this.canvas.height = this.container.clientHeight;    }    initParticles() {        this.particles = Array.from({length: this.options.particleCount}, (_, i) => {            // 速度计算逻辑优化            const baseSpeed = this.options.velocity *                 (1 + this.options.speedVariation * (Math.random() - 0.5));                        return {                id: i,                x: Math.random() * this.canvas.width,                y: Math.random() * this.canvas.height,                vx: (Math.random() - 0.5) * baseSpeed,                vy: (Math.random() - 0.5) * baseSpeed,                color: this.generateColor(),                connections: new Set()            };        });                this.mouse = { x: null, y: null };    }    generateColor() {        if(this.options.colorType === 'custom') {            return this.options.colors[                Math.floor(Math.random() * this.options.colors.length)            ];        }        return `hsl(${Math.random()*360}, 70%, 60%)`;    }    bindEvents() {        SizeSensor.observe(this.container, () => this.resizeCanvas());                this.mouseHandler = e => {            const rect = this.container.getBoundingClientRect();            this.mouse.x = e.clientX - rect.left;            this.mouse.y = e.clientY - rect.top;        };                this.container.addEventListener('mousemove', this.mouseHandler);        this.container.addEventListener('mouseleave', () => {            this.mouse.x = null;            this.mouse.y = null;        });    }    updateParticles() {        this.particles.forEach(p => {            // 应用速度系数            p.x += p.vx * this.options.velocity;            p.y += p.vy * this.options.velocity;                        // 边界反弹            if(p.x < 0 || p.x > this.canvas.width) p.vx *= -1;            if(p.y < 0 || p.y > this.canvas.height) p.vy *= -1;                        p.x = Math.max(0, Math.min(p.x, this.canvas.width));            p.y = Math.max(0, Math.min(p.y, this.canvas.height));        });    }    drawConnections() {        const allPoints = [...this.particles];        if(this.mouse.x !== null) allPoints.push(this.mouse);        for(let i = 0; i < allPoints.length; i++) {            const p1 = allPoints[i];                        for(let j = i+1; j < allPoints.length; j++) {                const p2 = allPoints[j];                const dx = p1.x - p2.x;                const dy = p1.y - p2.y;                const distSq = dx*dx + dy*dy;                                if(distSq < this.options.maxDistance) {                    const gradient = this.ctx.createLinearGradient(                        p1.x, p1.y, p2.x, p2.y                    );                    gradient.addColorStop(0, p1.color);                    gradient.addColorStop(1, p2.color || p1.color);                                        this.ctx.strokeStyle = this.options.lineType === 'gradient'                         ? gradient                         : p1.color;                                        this.ctx.lineWidth = this.options.lineWidth *                         (1 - distSq/this.options.maxDistance);                                        this.ctx.beginPath();                    this.ctx.moveTo(p1.x, p1.y);                    this.ctx.lineTo(p2.x, p2.y);                    this.ctx.stroke();                }            }        }    }    drawParticles() {        this.particles.forEach(p => {            this.ctx.fillStyle = p.color;            this.ctx.fillRect(                p.x - this.options.particleSize/2,                p.y - this.options.particleSize/2,                this.options.particleSize,                this.options.particleSize            );        });    }    animate() {        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);        this.updateParticles();        this.drawConnections();        this.drawParticles();        requestAnimationFrame(() => this.animate());    }    startAnimation() {        this.animationFrame = requestAnimationFrame(() => this.animate());    }    destroy() {        cancelAnimationFrame(this.animationFrame);        SizeSensor.unobserve(this.container);        this.container.removeEventListener('mousemove', this.mouseHandler);        this.canvas.remove();    }}/* 自定义修改配置项 */new ParticleBackground(document.body, {    colorType: 'rainbow',    //colors: [],       //colorType为custom时开启    lineType: 'gradient',    particleCount: 80,lineWidth: 2, particleSize: 3,    maxDistance: 8000,    velocity: 1.2,           speedVariation: 0.3,     zIndex: -1,       opacity: 0.7});}();// 移动端推荐配置new ParticleBackground(container, {    particleCount: 60,    maxDistance: 4000,    lineWidth: 0.8})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/mouse/cursor.js"/>
      <url>/js/mouse/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='.5' fill='rgb(6, 252, 254)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date;function createtime() {    var t = new Date("04/01/2025 00:00:00"); now.setTime(now.getTime() + 250);    var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a, r = Math.floor(n);    1 == String(r).length && (r = "0" + r);    var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s); 1 == String(i).length && (i = "0" + i);    var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o); 1 == String(l).length && (l = "0" + l);    let g = "";    g = r < 18 && r >= 9 ? `<img class='boardsign' src='https://picx.zhimg.com/80/v2-3602778a69a13bc5650d30a99a89feeb_720w.webp?source=1def8aca'  width="40" height="40" title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span> <span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'> </i>`: `<img class='boardsign' src='https://picx.zhimg.com/80/v2-3602778a69a13bc5650d30a99a89feeb_720w.webp?source=1def8aca'  width="40" height="40" title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'>  <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'> </i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g)} setInterval((() => { createtime() }), 250);]]></content>
      
    </entry>
    
    
  
</search>
